# Load full scientific calculations support
from numpy import *
import scipy as Sci
import scipy.linalg
# Ensure you can save Matlab formated trace datafiles
from scipy.io import *
#import random

# Ensure you can work with files and system services
import sys
# Ensure basic math is available
import math
import pickle

if (len(sys.argv)!=2):
    print "Wrong number of arguments. Just the configuration name, please"
    quit()


# gen_param = dict({'mu':array([3.0,2.0,1.5,4.0,2.0,1.5,2.0,1.5]),\
#                   'sigma':array([[0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.7,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1]]),\
#                   'discr':4.0,\
#                   'n_choice':4})


########### This is V4
gen_param = dict({'mu':array([5.0,10.0,15.,25.0, 5.0, 10.0,15.,25.0]),\
                  'sigma':array([[12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\
                                 [0.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0],\
                                 [0.0,0.0,9.0,0.0,0.0,0.0,0.0,0.0],\
                                 [0.0,0.0,0.0,16.,0.0,0.0,0.0,0.0],\
                                 [0.0,0.0,0.0,0.0,12.,0.0,0.0,0.0],\
                                 [0.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0],\
                                 [0.0,0.0,0.0,0.0,0.0,0.0,9.0,0.0],\
                                 [0.0,0.0,0.0,0.0,0.0,0.0,0.0,16.0]]),\
                  'discr':4.0,\
                  'n_choice':4})
# gen_param = dict({'mu':array([5.0,10.0,15.,25.0, 15.0, 10.0,5.,25.0]),\
#                   'sigma':array([[9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,9.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,9.,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,9.,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,9.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0]]),\
#                   'discr':4.0,\
#                   'n_choice':4})
# gen_param = dict({'mu':array([5.0,10.0,15.,25.0, 25.0, 10.0,15.,5.0]),\
#                   'sigma':array([[12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,9.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,16.,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,16.,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,9.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0]]),\
#                   'discr':4.0,\
#                   'n_choice':4})


#### This is V2
# gen_param = dict({'mu':array([5.0,10.0,15.,25.0, 10.0, 5.0,15.,25.0]),\
#                   'sigma':array([[12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,9.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,16.,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,9.,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,12.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,9.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,0.0,16.0]]),\
#                   'discr':4.0,\
#                   'n_choice':4})

#### This is V1
# gen_param = dict({'mu':array([5.0,10.0,15.,25.0, 25.0, 15.0,10.,5.0]),\
#                   'sigma':array([[9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,9.0,0.0,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,9.,0.0,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,9.,0.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,9.0,0.0],\
#                                  [0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0]]),\
#                   'discr':4.0,\
#                   'n_choice':4})
# gen_param = dict({'mu':array([5.0,10.0,15.,25.0, 10.0, 5.0,15.,25.0]),\
#                   'sigma':array([[12.0,0.0,0.0,0.0,0.0,12.0,0.0,0.0],\
#                                  [0.0 ,9.0,0.0,0.0,9.0, 0.0,0.0,0.0],\
#                                  [0.0 ,0.0,9.0,0.0,0.0, 0.0,9.0,0.0],\
#                                  [0.0 ,0.0,0.0,16.,0.0, 0.0,0.0,16.0],\
#                                  [0.0 ,9.0,0.0,0.0,11.,0.0,0.0,0.0],\
#                                  [12.0,0.0,0.0,0.0,0.0,14.0,0.0,0.0],\
#                                  [0.0,0.0,9.0,0.0,0.0,0.0,11.0,0.0],\
#                                  [0.0,0.0,0.0,16.0,0.0,0.0,0.0,18.0]]),\
#                   'discr':4.0,\
#                   'n_choice':4})

user_param = dict({'n_experts':5,\
                   'n_choice':4,\
                   'beta':0.01,\
                   'gamma':0.1,\
                   'beta_spec':0.05,\
                   'eta':15.0,\
                   'epsilon':0.05})

config_saver = dict(gen_param)
for x in user_param.keys():
    config_saver[x]=user_param[x]
savemat(sys.argv[1]+".mat",config_saver)

f = open(sys.argv[1]+".pickle",'w');
pickle.dump(gen_param,f)
pickle.dump(user_param,f)
f.close()

# %
# %pickle.dump(gen_param,f)
# %pickle.dump(user_param,f)
# %f.close()

# %%%%%%
# %f = open('config_params_v1_py.pickle','r')
# %gen_param = pickle.load(f)
# %user_param = pickle.load(f)
# %f.close()
